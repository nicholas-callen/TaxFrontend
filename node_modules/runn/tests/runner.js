'use strict';

var assert = require('chai').assert,
	runner = require('../lib/runner.js');

describe('the middleware runner', function(){
	it('exists', function(){
		assert.ok(runner);
		assert.isFunction(runner);
	});


	describe('runner()', function(){
		it('runs middleware', function(d){
			// stub the deps

			var stub = {
				beforestack: [
					function(run, done) {
						run.data = 'foo bar';
						done();
					},
					function(run, done) {
						run.data = 'foo biz';
						// async
						setTimeout(done, 100);
					},
				],
				afterstack: [
					function(run, done) {
						run.data = 'foo bar barz';
						// async
						setTimeout(done, 100);
					},
					function(run, done) {
						run.data = 'foo biz baz';
						done();
					},
				],
				middlestack: [
					function(run, done) {
						run.data = 'asdlkjsadflkj';
						// async
						setTimeout(done, 100);
					},
				],
				data: {}
			};
			runner.call(stub, {foo:'bar'}, function(err, data){
				assert.isFalse(err);
				assert.isObject(data);
				d();
			});
		});
	});

	describe('runner()', function(){
		it('runs middleware with sparse info', function(d){
			// stub the deps

			var stub = {
				beforestack: [ ],
				afterstack: [
					function(run, done) {
						run.data = 'foo bar barz';
						// async
						setTimeout(done, 100);
					},
					function(run, done) {
						run.data = 'foo biz baz';
						done();
					},
				],
				middlestack: [
					function(run, done) {
						run.data = 'asdlkjsadflkj';
						// async
						setTimeout(done, 100);
					},
				],
				data: {}
			};
			runner.call(stub, {foo: 'bar'}, function(err, data){
				assert.isFalse(err);
				d();
			});
		});
	});
});
